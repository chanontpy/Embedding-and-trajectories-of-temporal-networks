{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "770ad541-9604-4046-a6d0-e2868f9b88eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import numpy.linalg as LA\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def Adjacency(C):\n",
    "    Net =[[ [], -1.0 ]]\n",
    "    Net2 =[[ [], -1.0 ]]\n",
    "    time_points = C[:,2]\n",
    "    nodes0 = C[:,0]\n",
    "    nodes1 = C[:,1]\n",
    "    num1 = int(max(np.unique(nodes0)))\n",
    "    num2 = int(max(np.unique(nodes1)))\n",
    "    num = max([num1,num2])\n",
    "    N = np.shape(C[:,0])[0]\n",
    "    time_points = np.unique(C[:,2])\n",
    "    \n",
    "    for t in time_points:\n",
    "        A = np.zeros((num+1,num+1))\n",
    "        for k in range(N):\n",
    "            if C[k][2] == t:\n",
    "                n = int(C[k][0])\n",
    "                m = int(C[k][1])\n",
    "                A[n][m] = 1\n",
    "                A[m][n] = 1\n",
    "        A2 = A.tolist()\n",
    "        Net.append([A2,t])\n",
    "    return Net\n",
    "\n",
    "def ComputeBk(net_k, t_k, alpha, k ,B_k_1,t_k_1):\n",
    "    if k == 1 :\n",
    "        net1  = net_k\n",
    "        t1 = t_k\n",
    "        B1 = np.copy(net1)\n",
    "        return B1, t1\n",
    "\n",
    "    numrow = len(net_k)\n",
    "    numcol = len(net_k[0])\n",
    "    Bk = np.zeros((numrow, numcol))\n",
    "    for i in range(0, numrow):\n",
    "        for j in range(0,numcol):\n",
    "            node_k   = net_k[i][j]\n",
    "            if node_k != 0:\n",
    "                update = node_k + ( B_k_1[i][j]/math.exp( alpha*(t_k-t_k_1) ) )\n",
    "            else:\n",
    "                update = 0 + ( B_k_1[i][j]/math.exp( alpha*(t_k-t_k_1) ) )\n",
    "\n",
    "            Bk[i][j] = update\n",
    "    return Bk,t_k\n",
    "\n",
    "def Tie_decay_matrices(alpha, C):\n",
    "    Net = Adjacency(C)\n",
    "    B = [[[],-1.0]]\n",
    "    for i, n_i in enumerate(Net):\n",
    "        if i==0 :\n",
    "            continue\n",
    "        Bi_1 = B[i-1]\n",
    "        Bi,Ti = ComputeBk(n_i[0],n_i[1] ,alpha, i, Bi_1[0],Bi_1[1])\n",
    "        B.append([Bi,Ti])\n",
    "    return B\n",
    "\n",
    "def Squared_Frobenius_Distance_matrix(B): #B is from tie_decay_matrices(alpha,C)\n",
    "    D = np.zeros((len(B),len(B)))\n",
    "    for i, Bi in enumerate(B):\n",
    "        for j, Bj in enumerate(B):\n",
    "            if i == j:\n",
    "                D[i][j] = 0\n",
    "                D[j][i] = 0\n",
    "            elif i < j:\n",
    "                D[i][j] = LA.norm(Bi-Bj)**2\n",
    "                D[j][i] = D[i][j]\n",
    "            else:\n",
    "                continue\n",
    "    return D\n",
    "\n",
    "def Degree_matrix(A): #A is a tie-decay adjacency matrix at a time t.\n",
    "    m = np.shape(A)[0]\n",
    "    n = np.shape(A)[1]\n",
    "    if m!=n:\n",
    "        return print('Error: not a square matrix')\n",
    "    else:\n",
    "        degree_matrix = np.zeros((m,n))\n",
    "    \n",
    "        for i in range(0,m):\n",
    "            r = sum(A[i])\n",
    "            degree_matrix[i][i] = degree_matrix[i][i] + r\n",
    "\n",
    "        return degree_matrix\n",
    "\n",
    "def Laplacian_matrix(A): #A is also a tie-decay adjacency matrix at a time t.\n",
    "    L = Degree_matrix(A) - A\n",
    "    return L\n",
    "\n",
    "def Find_eigenpair(D):\n",
    "    A = []\n",
    "    eigenvalues = LA.eig(D)[0]\n",
    "    eigenvectors_col = LA.eig(D)[1]\n",
    "    \n",
    "    idx = eigenvalues.argsort()[::-1]   \n",
    "    eigenvalues = eigenvalues[idx]\n",
    "    eigenvectors_col = eigenvectors_col[:,idx]\n",
    "    \n",
    "    eigenvectors_row = np.transpose(eigenvectors_col)\n",
    "    for i in range(len(eigenvalues)):\n",
    "        A.append([eigenvalues[i],eigenvectors_row[i]])\n",
    "    return A\n",
    "\n",
    "def Squared_Laplacian_distance(A,B): # A,B are tie-decay matrices. Already squared.\n",
    "    L = Laplacian_matrix(A)\n",
    "    K = Laplacian_matrix(B)\n",
    "    M, N = Find_eigenpair(L), Find_eigenpair(K)\n",
    "    m = len(M)\n",
    "    #n = len(N)\n",
    "    value = 0\n",
    "    \n",
    "    for i in range(0,m):\n",
    "        value = value + ((np.real(M[i][0]) - np.real(N[i][0]))**2)\n",
    "        \n",
    "    #value = np.sqrt(value)\n",
    "    return value\n",
    "\n",
    "def Squared_Laplacian_distance_matrix(B): # B = Tie_decay_matrices(alpha, C)\n",
    "    LD = np.zeros((len(B),len(B)))\n",
    "    \n",
    "    for i, Bi in enumerate(B):\n",
    "        for j, Bj in enumerate(B):\n",
    "            if i == j:\n",
    "                LD[i][j] = 0\n",
    "                LD[j][i] = 0\n",
    "            elif i < j:\n",
    "                LD[i][j] = Squared_Laplacian_distance(Bi,Bj)\n",
    "                LD[j][i] = LD[i][j]\n",
    "            else:\n",
    "                continue\n",
    "            \n",
    "    return LD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78aa5559-66e2-4987-a44e-8170f12a398c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
